hc_sim_inv, by=c('scenario','gen_group'))
hc_hourly_sim <- hc_hourly_sim %>%
mutate(
hourly_gen = hourly_cap_fac * capacity,
sim_hrate = ifelse(inv_choice == 1, (1 - 0.015)*hrate, hrate),
hourly_heat_input = hourly_gen * sim_hrate,
hourly_co2e = co2e_mmbtu * hourly_heat_input,
hourly_nox  = nox_mmbtu * hourly_heat_input,
hourly_so2  = so2_mmbtu * hourly_heat_input,
hourly_pm25  = pm25_mmbtu * hourly_heat_input
)
hc_hourly_sim <- merge(hc_hourly_sim, hourly_weights, by="hour")
hc_hourly_sim <- hc_hourly_sim[,c(
"plantID",
"scenario",
"hour",
"region",
"region_int",
"state",
"FIPS2",
"FIPS3",
"lat",
"lon",
"bca",
"tau",
"group",
"gen_group",
"weights",
"fuel_cat",
"fuel",
"capacity",
"hrate",
"fuel_price",
"cap_fac",
"co2e_mmbtu",
"nox_mmbtu",
"so2_mmbtu",
"pm25_mmbtu",
"hourly_cap_fac",
"hourly_gen",
"hourly_heat_input",
"inv_int",
"inv_choice",
"sim_hrate",
"hourly_co2e",
"hourly_nox",
"hourly_so2",
"hourly_pm25"
)]
hc_hourly_sim <- hc_hourly_sim[
order(hc_hourly_sim[,'plantID'],
hc_hourly_sim[,'scenario'],
hc_hourly_sim[,'hour']),
]
hc_annual_sim <- hc_hourly_sim %>%
group_by(plantID, scenario) %>%
mutate(
annual_gen = sum(hourly_gen * weights) * 24 * 365,
annual_heat_input = sum(hourly_heat_input * weights) * 24 * 365,
annual_cap_fac = annual_gen/(capacity * 24 * 365),
annual_co2e = co2e_mmbtu * annual_heat_input,
annual_nox = nox_mmbtu * annual_heat_input,
annual_so2 = so2_mmbtu * annual_heat_input,
annual_pm25 = pm25_mmbtu * annual_heat_input
) %>%
select(
-c('hour','weights', 'hourly_cap_fac', 'hourly_gen', 'hourly_heat_input',
'hourly_co2e', 'hourly_nox', 'hourly_so2', 'hourly_pm25')) %>%
distinct()
temp <- hc_annual_sim %>%
filter(bca == 1, inv_choice == 1) %>%
group_by(tau, region) %>%
summarize(
count = n()
)
pdf("Writing/Draft/figures/chapter5_figures/hc_inv_region.pdf",
width = 6, height = 4)
ggplot(temp, aes(x= tau, y = count, fill = region)) +
geom_bar(stat = 'identity', position = 'stack') +
labs(x='\nCalifornia Emissions Price ($/tonne)',
y='# Investing Plants\n') +
scale_x_continuous(breaks = c(0, 20, 40, 60, 80)) +
theme(legend.title = element_blank())
dev.off()
rm(cluster_demand, cluster_plants, hc_annual_sim, hc_hourly_sim,
hc_sim_gen_hourly, hc_sim_inv, hourly_weights, sim_inv, temp, gen_files,
hc_gen_files, hc_inv_files, inv_files, process_hourly_gen, process_inv)
rm(p1, p2, p3, p4, p5, p6, temp_a, temp_b)
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
## Disadvantaged Communities ---------------------------------------------------
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# Import all the EJ data
all_comms <- read_csv("Data/main/disadvantaged/EJSCREEN_2021_USPR_Tracts_part1.csv")
temp <- read_csv("Data/main/disadvantaged/EJSCREEN_2021_USPR_Tracts_part2.csv")
all_comms <- bind_rows(all_comms, temp)
rm(temp)
# Import the geography of the WECC
wecc_shp <- st_read("Data/main/NERC_Regions/NERC_Regions_Subregions.dbf") %>%
filter(SUBNAME %in% c("AZ-NM-SNV", "CA-MX US", "RMPA", "NWPP"))
wecc_shp <- st_transform(wecc_shp, st_crs(5070))
# Grab the tract shapefiles for the US states that intersect with the WECC
my_states <- c(
"CA", "OR", "WA", "AZ", "NM", "CO", "NV", "UT", "WY", "ID", "MT", "NE", "SD"
)
# Loop through the states grabbing all their census tracts (2010 tracts)
wecc_tracts <- list()
for (i in 1:length(my_states)){
my_state <- my_states[i]
df <- tracts(state = my_state, year=2010)
wecc_tracts[[i]] <- df
}
wecc_tracts <- bind_rows(wecc_tracts)
wecc_tracts <- st_transform(wecc_tracts, st_crs(5070))
# Identify just the census tracts that intersect the WECC
wecc_tracts <- st_filter(wecc_tracts, wecc_shp)
# Add the EJ data to the shapefile
all_comms <- all_comms %>% mutate(ID = str_pad(ID, 11, "left", "0"))
all_comms <- merge(
all_comms, wecc_tracts, all.x = F, all.y = T, by.x="ID", by.y="GEOID10"
)
# There are 10 tracts in the shapefile that do not appear in the EJ data for
# unknown reasons
# temp2 <- wecc_tracts[!(wecc_tracts$GEOID10 %in% comms$ID),]
# tribal_ct <- tribal_census_tracts()
# Indicators Available
# Environmental Exposure Indicators (1)
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# P_OZONE	Percentile for Ozone
# P_PM25	Percentile for Particulate Matter 2.5
# P_LDPNT	Percentile for Lead paint
# P_DSLPM	Percentile for  2017 Diesel particulate matter
# P_CANCR	Percentile for  2017 Air toxics cancer risk
# P_RESP	Percentile for  2017 Air toxics respiratory HI
# P_PTRAF	Percentile for Traffic proximity
# Environmental Effect Indicators (2)
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# P_PWDIS	Percentile for Wastewater discharge
# P_PNPL	Percentile for Superfund proximity
# P_PRMP	Percentile for RMP facility proximity
# P_PTSDF	Percentile for Hazardous waste proximity
# P_UST	Percentile for Underground storage tanks
# Sensitive Population Indicators (1)
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# P_UNDR5PCT	Percentile for % under age 5
# P_OVR64PCT	Percentile for % over age 64
# Socioeconomic Factor Indicators (2)
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# P_MINORPCT	Percentile for % people of color
# P_LWINCPCT	Percentile for % low income
# P_LESHSPCT	Percentile for % less than high school education
# P_LNGISPCT	Percentile for % linguistically isolated
# P_UNEMPPCT	Percentile for Unemployment rate
# P_VULEOPCT	Percentile for Demographic Index
all_comms <- all_comms %>%
rowwise() %>%
mutate(
# Population
na_pop1 = sum(is.na(P_UNDR5PCT),
is.na(P_OVR64PCT)),
na_pop2 = sum(is.na(P_MINORPCT),
is.na(P_LWINCPCT),
is.na(P_LESHSPCT),
is.na(P_LNGISPCT),
is.na(P_UNEMPPCT),
is.na(P_VULEOPCT)),
na_pop = na_pop1 + na_pop2,
redo_Pop1 = sum(
P_UNDR5PCT, P_OVR64PCT, na.rm = T)
/(2 - na_pop1),
redo_Pop2 = sum(P_MINORPCT, P_LWINCPCT, P_LESHSPCT, P_LNGISPCT,
P_UNEMPPCT, P_VULEOPCT, na.rm=T)/(6 - na_pop2),
redo_Pop = ifelse(na_pop < 4 & na_pop1 < 2,
.5*sum(redo_Pop1, redo_Pop2, na.rm=T), NA),
# Pollution
na_pol1 = sum(is.na(P_OZONE),
is.na(P_PM25),
is.na(P_LDPNT),
is.na(P_DSLPM),
is.na(P_CANCR),
is.na(P_RESP),
is.na(P_PTRAF)
),
na_pol2 = sum(is.na(P_PWDIS),
is.na(P_PNPL),
is.na(P_PRMP),
is.na(P_PTSDF),
is.na(P_UST)
),
na_pol = na_pol1 + na_pol2,
redo_Pol1 = sum(
P_OZONE,P_PM25,P_LDPNT,P_DSLPM,P_CANCR,P_RESP,P_PTRAF, na.rm = T)
/(7 - na_pol1),
redo_Pol2 = sum(
P_PWDIS, P_PNPL, P_PRMP, P_PTSDF, P_UST, na.rm=T)/(5 - na_pol2),
redo_Pol = ifelse(na_pol < 4,  sum((2/3)*redo_Pol1, (1/3)*redo_Pol2, na.rm=T), NA)
)
rescale_10 <- function(x){
upper_x <- max(x, na.rm = T)
y <- 10*x/upper_x
return(y)
}
# Rescale the two subindexes
all_comms$redo_Pol_scaled <- rescale_10(all_comms$redo_Pol)
all_comms$redo_Pop_scaled <- rescale_10(all_comms$redo_Pop)
# Create the overall index
all_comms$DAC_score <- all_comms$redo_Pop_scaled * all_comms$redo_Pol_scaled
# Get Percentiles for the Pollution Score
temp <- all_comms[!is.na(all_comms$redo_Pol),]
temp$Pol_score_pctl <- ecdf(temp$redo_Pol)(temp$redo_Pol)
temp <- temp[,c("ID","Pol_score_pctl")]
all_comms <- left_join(all_comms, temp, by=c("ID"))
# Get Percentiles for the DAC Score
temp <- all_comms[!is.na(all_comms$DAC_score),]
temp$DAC_score_pctl <- ecdf(temp$DAC_score)(temp$DAC_score)
temp <- temp[,c("ID","DAC_score_pctl")]
all_comms <- left_join(all_comms, temp, by=c("ID"))
# Find the census tracts that overlap with tribal tracts
temp <- tribal_census_tracts(year = 2021)
temp <- st_transform(temp, crs = st_crs(5070))
temp <- temp[temp$ALAND/2589988 > 10,]
all_comms <- st_as_sf(all_comms, crs= st_crs(5070))
temp <- st_overlaps(all_comms, temp)
temp <- !unlist(lapply(temp, is_empty))
all_comms$tribal <- temp
# Classify areas as meeting DAC requirements
all_comms <- all_comms %>%
mutate(
DAC_status = ifelse(
DAC_score_pctl > 0.75 | Pol_score_pctl > 0.95 | tribal,
"Disadvantaged", "Non-Disadvantaged"
),
DAC_status  = ifelse(is.na(DAC_status), "Non-Disadvantaged", DAC_status)
)
sum(all_comms$DAC_status == "Disadvantaged")
# 4587
sum(all_comms$DAC_status == "Disadvantaged")/nrow(all_comms)
# 0.2950408
sum(all_comms$DAC_score_pctl > 0.75, na.rm = T)/nrow(all_comms)
# 0.2488583
sum(all_comms$Pol_score_pctl > 0.95 & is.na(all_comms$DAC_score_pctl), na.rm = T)/nrow(all_comms)
# 0
sum(all_comms$tribal & (all_comms$DAC_score_pctl > 0.75), na.rm = T)/nrow(all_comms)
# 0.001093459
sum(all_comms$tribal & (all_comms$DAC_score_pctl <= 0.75), na.rm = T)/nrow(all_comms)
# 0.04013636
# Things to do next:
# 1. Create good percentiles for the whole thing
# 2. Set Up the two conditions we can reasonably work with and classify
# 3. Filter just to California and compare with those classifications
cal_comms <- all_comms %>%
filter(startsWith(ID, "06"))
cal_dacs <- read_excel(
"Data/main/disadvantaged/CalEnviroScreen_2022/SB535DACresultsdatadictionary_F_2022.xlsx",
sheet = "CES4.0FINAL_results",
na = "NA"
)
cal_dacs$`Census Tract` <- str_pad(cal_dacs$`Census Tract`, 11, "left", "0")
temp <- merge(cal_comms, cal_dacs, by.x="ID", by.y="Census Tract")
temp <- temp %>%
mutate(
DAC_status_og = ifelse(`CES 4.0 Percentile` >= 75,
"Disadvantaged", "Non-disadvantaged"),
DAC_status_og = ifelse(is.na(DAC_status_og), "Non-disadvantaged",
DAC_status_og)
)
pdf("Writing/Draft/figures/chapter5_figures/DAC_des_scatter.pdf",
width = 7, height = 4)
ggplot(temp, aes(x=`CES 4.0 Percentile`, y=DAC_score_pctl*100,
color =  paste(DAC_status, DAC_status_og))) +
geom_point(alpha = 0.15) +
scale_color_discrete(
labels = c('DAC : DAC', 'DAC : Non-DAC', 'Non-DAC : DAC', 'Non-DAC : Non-DAC'),
name = "Rep. Status : Official Status"
) +
labs(x = "\nCalEnviroScreen 4.0 Percentile",
y = "Replicated DAC Percentile\n")
dev.off()
temp$DAC_status_pctl <- ifelse(temp$DAC_score_pctl > 0.75, "Disadvantaged", "Non-disadvantaged")
temp <- temp %>%
mutate(
DAC_status_pctl = ifelse(DAC_score_pctl > 0.75, "Disadvantaged", "Non-disadvantaged"),
DAC_status_pctl = ifelse(is.na(DAC_status_pctl),"Non-disadvantaged", DAC_status_pctl)
)
pdf("Writing/Draft/figures/chapter5_figures/DAC_designation.pdf",
width = 5, height = 4)
ggplot(temp, aes(x = DAC_status_og, fill=DAC_status_pctl)) +
geom_bar(position = "fill", stat="count") +
scale_y_continuous(labels = scales::percent_format()) +
labs(x="\nDesignation in CalEnviroScreen 4.0") +
scale_fill_discrete(name = "Replicated\nDesignation") +
theme(
legend.position = "right",
axis.title.y = element_blank()
)
dev.off()
# st_set_geometry(temp, NULL) %>% count(DAC_status, DAC_status_og)
# summ_df <- st_set_geometry(all_comms, NULL) %>%
#   filter(DAC_status == "Non-Disadvantaged") %>%
#   mutate(
#     MINORPCT = MINORPCT*100,
#     LOWINCPCT = LOWINCPCT*100,
#     LESSHSPCT = LESSHSPCT*100,
#     UNDER5PCT = UNDER5PCT*100,
#     OVER64PCT = OVER64PCT*100,
#     UNEMPPCT = UNEMPPCT*100
#   ) %>%
#   select(
#     P_PTRAF,
#     P_PWDIS,
#     P_PNPL,
#     P_PTSDF,
#     P_OZONE,
#     P_PM25,
#     ACSTOTPOP,
#     MINORPCT,
#     LOWINCPCT,
#     LESSHSPCT,
#     UNDER5PCT,
#     OVER64PCT,
#     UNEMPPCT
#   ) %>%
#   as.data.frame()
#
#
# stargazer(summ_df, summary = TRUE,
#           summary.stat = c("median", "mean", "sd"),
#           digits = 1,
#           covariate.labels = c(
#             '%-ile Traffic proximity',
#             '%-ile Wastewater discharge',
#             '%-ile Superfund proximity',
#             '%-ile Hazardous waste proximity',
#             '%-ile Ozone',
#             '%-ile Particulate Matter 2.5',
#             'Total Population',
#             '% People of color',
#             '% Low income',
#             '% Less than HS dipolma',
#             '% Under age 5',
#             '% Over age 64',
#             'Unemployment rate'
#           ))
# # Trying to Figure Out What California is doing
# #::::::::::::::::::::::::::::::::::::::::::::::::
#
# cal_dacs <- read_excel(
#   "Data/main/disadvantaged/CalEnviroScreen_2022/SB535DACresultsdatadictionary_F_2022.xlsx",
#   sheet = "CES4.0FINAL_results",
#   na = "NA"
#   )
#
# df <- cal_dacs %>%
#   rowwise() %>%
#   mutate(
#     # Population
#     na_pop1 = sum(is.na(`Asthma Pctl`),
#                   is.na(`Low Birth Weight Pctl`),
#                   is.na(`Cardiovascular Disease Pctl`)),
#     na_pop2 = sum(is.na(`Education Pctl`),
#                   is.na(`Linguistic Isolation Pctl`),
#                   is.na(`Poverty Pctl`),
#                   is.na(`Unemployment Pctl`),
#                   is.na(`Housing Burden Pctl`)),
#     na_pop = na_pop1 + na_pop2,
#     redo_Pop1 = sum(
#       `Asthma Pctl`, `Low Birth Weight Pctl`, `Cardiovascular Disease Pctl`, na.rm = T)
#     /(3 - na_pop1),
#     redo_Pop2 = sum(
#       `Education Pctl`, `Linguistic Isolation Pctl`, `Poverty Pctl`,
#       `Unemployment Pctl`, `Housing Burden Pctl`, na.rm=T)/(5 - na_pop2),
#     redo_Pop = ifelse(na_pop < 4, .5*sum(redo_Pop1, redo_Pop2, na.rm=T), NA),
#     error_Pop = `Pop. Char.` - redo_Pop,
#     # Pollution
#     na_pol1 = sum(is.na(`Ozone Pctl`),
#                   is.na(`PM2.5 Pctl`),
#                   is.na(`Lead Pctl`),
#                   is.na(`Tox. Release Pctl`),
#                   is.na(`Diesel PM Pctl`),
#                   is.na(`Drinking Water Pctl`),
#                   is.na(`Pesticides Pctl`),
#                   is.na(`Traffic Pctl`)
#                   ),
#     na_pol2 = sum(is.na(`Cleanup Sites Pctl`),
#                   is.na(`Groundwater Threats Pctl`),
#                   is.na(`Imp. Water Bodies Pctl`),
#                   is.na(`Haz. Waste Pctl`),
#                   is.na(`Solid Waste Pctl`)
#                   ),
#     na_pol = na_pol1 + na_pol2,
#     redo_Pol1 = sum(
#       `Ozone Pctl`, `PM2.5 Pctl`, `Lead Pctl`, `Tox. Release Pctl`,
#       `Diesel PM Pctl`,`Drinking Water Pctl`,`Pesticides Pctl`,`Traffic Pctl`, na.rm = T)
#     /(8 - na_pol1),
#     redo_Pol2 = sum(
#       `Cleanup Sites Pctl`,`Groundwater Threats Pctl`,`Imp. Water Bodies Pctl`,
#       `Haz. Waste Pctl`,`Solid Waste Pctl`, na.rm=T)/(5 - na_pol2),
#     redo_Pol = ifelse(na_pol < 4,  sum((2/3)*redo_Pol1, (1/3)*redo_Pol2, na.rm=T), NA),
#     error_Pol = `Pollution Burden` - redo_Pol
#   )
#
# rescale_10 <- function(x){
#   upper_x <- max(x, na.rm = T)
#   y <- 10*x/upper_x
#   return(y)
# }
#
# df$redo_Pol_scaled <- rescale_10(df$redo_Pol)
# df$redo_Pop_scaled <- rescale_10(df$redo_Pop)
#
# df <- df %>%
#   mutate(
#     redo_CES = redo_Pop_scaled * redo_Pol_scaled,
#     error_rate = redo_CES - `CES 4.0 Score`
#   ) %>%
#   select(
#     `Census Tract`,
#     `Asthma Pctl`, `Low Birth Weight Pctl`, `Cardiovascular Disease Pctl`,
#     `Education Pctl`, `Linguistic Isolation Pctl`, `Poverty Pctl`,
#     `Unemployment Pctl`, `Housing Burden Pctl`, na_pop1, na_pop2, na_pop,
#     redo_Pop1, redo_Pop2, redo_Pop, `Pop. Char.`, error_Pop,
#     na_pol1, na_pol2, na_pol,
#     redo_Pol1, redo_Pol2, redo_Pol, `Pollution Burden`, error_Pol,
#     redo_Pop_scaled, redo_Pol_scaled, redo_CES, `CES 4.0 Score`, error_rate
#   )
temp <- st_set_geometry(all_comms, NULL) %>%
select(ID, DAC_status)
wecc_tracts <- merge(wecc_tracts, temp, by.x = "GEOID10", by.y = "ID")
rm(
all_comms, cal_comms, cal_dacs, demand_sch, df, hourly_sim, sim_gen_hourly,
temp, i, my_state, my_states, rescale_10
)
gc()
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
## Environmental Inequality Gap ------------------------------------------------
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
temp <- st_set_geometry(wecc_tracts, NULL) %>%
select(GEOID10, DAC_status, STATEFP10, COUNTYFP10, ALAND10) %>%
# Just to avoid an issue
mutate(
ALAND10 = ifelse(ALAND10 == 0, 1, ALAND10)
)
annual_sim_sf <- st_as_sf(
x = annual_sim,
coords = c("lon", "lat"),
crs =  "WGS84") %>%
st_transform(crs = st_crs(wecc_tracts))
plants_sf <- st_as_sf(
x = plants,
coords = c("lon", "lat"),
crs =  "WGS84") %>%
st_transform(crs = st_crs(wecc_tracts))
ei_gap1 <- st_join(plants_sf, wecc_tracts)
ei_gap1 <- st_set_geometry(ei_gap1, NULL) %>%
select(plantID, GEOID10)
ei_gap1 <- merge(annual_sim, ei_gap1, by="plantID")
ei_gap1 <- ei_gap1 %>%
group_by(GEOID10, scenario, bca, tau) %>%
summarise(
annual_nox = sum(annual_nox),
annual_so2 = sum(annual_so2),
annual_pm25 = sum(annual_pm25)
)
temp_spt <- split(ei_gap1, ei_gap1$scenario)
ei_gap1 <- lapply(
temp_spt,
function (x) {
y = merge(temp, x, by = "GEOID10", all.x = T)
my_scenario = unique(x$scenario)
my_bca = unique(x$bca)
my_tau = unique(x$tau)
y$scenario = rep(my_scenario, nrow(y))
y$bca = rep(my_bca, nrow(y))
y$tau = rep(my_tau, nrow(y))
return(y)
}
)
ei_gap1 <- bind_rows(ei_gap1)
ei_gap1 <- ei_gap1 %>%
mutate_at(vars('annual_nox', 'annual_so2', 'annual_pm25'),
~replace(., is.na(.), 0))
temp <- ei_gap1 %>%
group_by(DAC_status, scenario, bca, tau) %>%
summarise(
annual_nox = mean(annual_nox/ALAND10*2589988),
annual_so2 = mean(annual_so2/ALAND10*2589988),
annual_pm25 = mean(annual_pm25/ALAND10*2589988)
)
# NOx
pdf("Writing/Draft/figures/chapter5_figures/ei_gap_bca_nox.pdf",
width = 5, height = 4)
ggplot(temp %>% filter(bca == 1), aes(x= tau, y=annual_nox, color = DAC_status)) +
geom_line(lwd=2) +
geom_point(color = "white", size = 5) +
geom_point(size = 4) +
labs(x='\nCalifornia Emissions Price ($/tonne)',
y='Tonnes NOx per sq. mile\n') +
scale_x_continuous(breaks = c(0, 20, 40, 60, 80)) +
theme(legend.title = element_blank(), legend.position = "top")
dev.off()
pdf("Writing/Draft/figures/chapter5_figures/ei_gap_nobca_nox.pdf",
width = 7, height = 4)
ggplot(temp %>% filter(bca == 0), aes(x= tau, y=annual_nox, color = DAC_status)) +
geom_line(lwd=2) +
geom_point(color = "white", size = 5) +
geom_point(size = 4) +
labs(x='\nCalifornia Emissions Price ($/tonne)',
y='Tonnes NOx per sq. mile\n') +
scale_x_continuous(breaks = c(0, 20, 40, 60, 80)) +
theme(legend.title = element_blank(), legend.position = "top")
dev.off()
