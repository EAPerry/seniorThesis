#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# P_MINORPCT	Percentile for % people of color
# P_LWINCPCT	Percentile for % low income
# P_LESHSPCT	Percentile for % less than high school education
# P_LNGISPCT	Percentile for % linguistically isolated
# P_UNEMPPCT	Percentile for Unemployment rate
# P_VULEOPCT	Percentile for Demographic Index
all_comms <- all_comms %>%
rowwise() %>%
mutate(
# Population
na_pop1 = sum(is.na(P_UNDR5PCT),
is.na(P_OVR64PCT)),
na_pop2 = sum(is.na(P_MINORPCT),
is.na(P_LWINCPCT),
is.na(P_LESHSPCT),
is.na(P_LNGISPCT),
is.na(P_UNEMPPCT),
is.na(P_VULEOPCT)),
na_pop = na_pop1 + na_pop2,
redo_Pop1 = sum(
P_UNDR5PCT, P_OVR64PCT, na.rm = T)
/(2 - na_pop1),
redo_Pop2 = sum(P_MINORPCT, P_LWINCPCT, P_LESHSPCT, P_LNGISPCT,
P_UNEMPPCT, P_VULEOPCT, na.rm=T)/(6 - na_pop2),
redo_Pop = ifelse(na_pop < 4 & na_pop1 < 2,
.5*sum(redo_Pop1, redo_Pop2, na.rm=T), NA),
# Pollution
na_pol1 = sum(is.na(P_OZONE),
is.na(P_PM25),
is.na(P_LDPNT),
is.na(P_DSLPM),
is.na(P_CANCR),
is.na(P_RESP),
is.na(P_PTRAF)
),
na_pol2 = sum(is.na(P_PWDIS),
is.na(P_PNPL),
is.na(P_PRMP),
is.na(P_PTSDF),
is.na(P_UST)
),
na_pol = na_pol1 + na_pol2,
redo_Pol1 = sum(
P_OZONE,P_PM25,P_LDPNT,P_DSLPM,P_CANCR,P_RESP,P_PTRAF, na.rm = T)
/(7 - na_pol1),
redo_Pol2 = sum(
P_PWDIS, P_PNPL, P_PRMP, P_PTSDF, P_UST, na.rm=T)/(5 - na_pol2),
redo_Pol = ifelse(na_pol < 4,  sum((2/3)*redo_Pol1, (1/3)*redo_Pol2, na.rm=T), NA)
)
rescale_10 <- function(x){
upper_x <- max(x, na.rm = T)
y <- 10*x/upper_x
return(y)
}
# Rescale the two subindexes
all_comms$redo_Pol_scaled <- rescale_10(all_comms$redo_Pol)
all_comms$redo_Pop_scaled <- rescale_10(all_comms$redo_Pop)
# Create the overal index
all_comms$DAC_score <- all_comms$redo_Pop_scaled * all_comms$redo_Pol_scaled
# Get Percentiles for the Pollution Score
temp <- all_comms[!is.na(all_comms$redo_Pol),]
temp$Pol_score_pctl <- ecdf(temp$redo_Pol)(temp$redo_Pol)
temp <- temp[,c("ID","Pol_score_pctl")]
all_comms <- left_join(all_comms, temp, by=c("ID"))
# Get Percentiles for the DAC Score
temp <- all_comms[!is.na(all_comms$DAC_score),]
temp$DAC_score_pctl <- ecdf(temp$DAC_score)(temp$DAC_score)
temp <- temp[,c("ID","DAC_score_pctl")]
all_comms <- left_join(all_comms, temp, by=c("ID"))
# Find the census tracts that overlap with tribal tracts
temp <- tribal_census_tracts(year = 2021)
temp <- st_transform(temp, crs = st_crs(5070))
temp <- temp[temp$ALAND/2589988 > 10,]
all_comms <- st_as_sf(all_comms, crs= st_crs(5070))
temp <- st_overlaps(all_comms, temp)
temp <- !unlist(lapply(temp, is_empty))
all_comms$tribal <- temp
# Classify areas as meeting DAC requirements
all_comms <- all_comms %>%
mutate(
DAC_status = ifelse(
DAC_score_pctl > 0.75 | Pol_score_pctl > 0.95 | tribal,
"Disadvantaged", "Non-Disadvantaged"
),
DAC_status  = ifelse(is.na(DAC_status), "Non-Disadvantaged", DAC_status)
)
sum(all_comms$DAC_status == "Disadvantaged")
# 4587
sum(all_comms$DAC_status == "Disadvantaged")/nrow(all_comms)
# 0.2950408
sum(all_comms$DAC_score_pctl > 0.75, na.rm = T)/nrow(all_comms)
# 0.2488583
sum(all_comms$Pol_score_pctl > 0.95 & is.na(all_comms$DAC_score_pctl), na.rm = T)/nrow(all_comms)
# 0
sum(all_comms$tribal & (all_comms$DAC_score_pctl > 0.75), na.rm = T)/nrow(all_comms)
# 0.001093459
sum(all_comms$tribal & (all_comms$DAC_score_pctl <= 0.75), na.rm = T)/nrow(all_comms)
# 0.04013636
# Things to do next:
# 1. Create good percentiles for the whole thing
# 2. Set Up the two conditions we can reasonably work with and classify
# 3. Filter just to California and compare with those classifications
cal_comms <- all_comms %>%
filter(startsWith(ID, "06"))
cal_dacs <- read_excel(
"Data/main/disadvantaged/CalEnviroScreen_2022/SB535DACresultsdatadictionary_F_2022.xlsx",
sheet = "CES4.0FINAL_results",
na = "NA"
)
cal_dacs$`Census Tract` <- str_pad(cal_dacs$`Census Tract`, 11, "left", "0")
temp <- merge(cal_comms, cal_dacs, by.x="ID", by.y="Census Tract")
temp <- temp %>%
mutate(
DAC_status_og = ifelse(`CES 4.0 Percentile` >= 75,
"Disadvantaged", "Non-disadvantaged"),
DAC_status_og = ifelse(is.na(DAC_status_og), "Non-disadvantaged",
DAC_status_og)
)
ggplot(temp, aes(x=`CES 4.0 Percentile`, y=DAC_score_pctl,
color =  paste(DAC_status, DAC_status_og))) +
geom_point()
temp$DAC_status_pctl <- ifelse(temp$DAC_score_pctl > 0.75, "Disadvantaged", "Non-disadvantaged")
temp <- temp %>%
mutate(
DAC_status_pctl = ifelse(DAC_score_pctl > 0.75, "Disadvantaged", "Non-disadvantaged"),
DAC_status_pctl = ifelse(is.na(DAC_status_pctl),"Non-disadvantaged", DAC_status_pctl)
)
pdf("Writing/Draft/figures/chapter5_figures/DAC_designation.pdf",
width = 5, height = 4)
ggplot(temp, aes(x = DAC_status_og, fill=DAC_status_pctl)) +
geom_bar(position = "fill", stat="count") +
scale_y_continuous(labels = scales::percent_format()) +
labs(x="\nDesignation in CalEnviroScreen 4.0") +
scale_fill_discrete(name = "Replicated\nDesignation") +
theme(
legend.position = "right",
axis.title.y = element_blank()
)
dev.off()
# # Trying to Figure Out What California is doing
# #::::::::::::::::::::::::::::::::::::::::::::::::
#
# cal_dacs <- read_excel(
#   "Data/main/disadvantaged/CalEnviroScreen_2022/SB535DACresultsdatadictionary_F_2022.xlsx",
#   sheet = "CES4.0FINAL_results",
#   na = "NA"
#   )
#
# df <- cal_dacs %>%
#   rowwise() %>%
#   mutate(
#     # Population
#     na_pop1 = sum(is.na(`Asthma Pctl`),
#                   is.na(`Low Birth Weight Pctl`),
#                   is.na(`Cardiovascular Disease Pctl`)),
#     na_pop2 = sum(is.na(`Education Pctl`),
#                   is.na(`Linguistic Isolation Pctl`),
#                   is.na(`Poverty Pctl`),
#                   is.na(`Unemployment Pctl`),
#                   is.na(`Housing Burden Pctl`)),
#     na_pop = na_pop1 + na_pop2,
#     redo_Pop1 = sum(
#       `Asthma Pctl`, `Low Birth Weight Pctl`, `Cardiovascular Disease Pctl`, na.rm = T)
#     /(3 - na_pop1),
#     redo_Pop2 = sum(
#       `Education Pctl`, `Linguistic Isolation Pctl`, `Poverty Pctl`,
#       `Unemployment Pctl`, `Housing Burden Pctl`, na.rm=T)/(5 - na_pop2),
#     redo_Pop = ifelse(na_pop < 4, .5*sum(redo_Pop1, redo_Pop2, na.rm=T), NA),
#     error_Pop = `Pop. Char.` - redo_Pop,
#     # Pollution
#     na_pol1 = sum(is.na(`Ozone Pctl`),
#                   is.na(`PM2.5 Pctl`),
#                   is.na(`Lead Pctl`),
#                   is.na(`Tox. Release Pctl`),
#                   is.na(`Diesel PM Pctl`),
#                   is.na(`Drinking Water Pctl`),
#                   is.na(`Pesticides Pctl`),
#                   is.na(`Traffic Pctl`)
#                   ),
#     na_pol2 = sum(is.na(`Cleanup Sites Pctl`),
#                   is.na(`Groundwater Threats Pctl`),
#                   is.na(`Imp. Water Bodies Pctl`),
#                   is.na(`Haz. Waste Pctl`),
#                   is.na(`Solid Waste Pctl`)
#                   ),
#     na_pol = na_pol1 + na_pol2,
#     redo_Pol1 = sum(
#       `Ozone Pctl`, `PM2.5 Pctl`, `Lead Pctl`, `Tox. Release Pctl`,
#       `Diesel PM Pctl`,`Drinking Water Pctl`,`Pesticides Pctl`,`Traffic Pctl`, na.rm = T)
#     /(8 - na_pol1),
#     redo_Pol2 = sum(
#       `Cleanup Sites Pctl`,`Groundwater Threats Pctl`,`Imp. Water Bodies Pctl`,
#       `Haz. Waste Pctl`,`Solid Waste Pctl`, na.rm=T)/(5 - na_pol2),
#     redo_Pol = ifelse(na_pol < 4,  sum((2/3)*redo_Pol1, (1/3)*redo_Pol2, na.rm=T), NA),
#     error_Pol = `Pollution Burden` - redo_Pol
#   )
#
# rescale_10 <- function(x){
#   upper_x <- max(x, na.rm = T)
#   y <- 10*x/upper_x
#   return(y)
# }
#
# df$redo_Pol_scaled <- rescale_10(df$redo_Pol)
# df$redo_Pop_scaled <- rescale_10(df$redo_Pop)
#
# df <- df %>%
#   mutate(
#     redo_CES = redo_Pop_scaled * redo_Pol_scaled,
#     error_rate = redo_CES - `CES 4.0 Score`
#   ) %>%
#   select(
#     `Census Tract`,
#     `Asthma Pctl`, `Low Birth Weight Pctl`, `Cardiovascular Disease Pctl`,
#     `Education Pctl`, `Linguistic Isolation Pctl`, `Poverty Pctl`,
#     `Unemployment Pctl`, `Housing Burden Pctl`, na_pop1, na_pop2, na_pop,
#     redo_Pop1, redo_Pop2, redo_Pop, `Pop. Char.`, error_Pop,
#     na_pol1, na_pol2, na_pol,
#     redo_Pol1, redo_Pol2, redo_Pol, `Pollution Burden`, error_Pol,
#     redo_Pop_scaled, redo_Pol_scaled, redo_CES, `CES 4.0 Score`, error_rate
#   )
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
tracts_to_plants <- split(wecc_tracts, wecc_tracts$GEOID10)
tracts_to_plants <- lapply(tracts_to_plants, get_plants_within)
get_plants_within <- function(x) {
dist_list <- st_is_within_distance(
plant_coords,
wecc_tracts[x,],
dist = 1000*30*0.621371
)
dist_vec <- unlist(lapply(dist_list, function (x) ifelse(is_empty(x), 0, 1)))
target_index <- which(dist_vec == 1)
target_plants <- plant_coords$plantID[target_index]
my_rows <- length(target_plants)
temp_df <- data.frame(
ID = rep(wecc_tracts$GEOID10[x], my_rows),
plantID = target_plants
)
return(temp_df)
}
tracts_to_plants <- lapply(tracts_to_plants, get_plants_within)
plant_coords <- st_as_sf(
x = plants,
coords = c("lon", "lat"),
crs =  "WGS84") %>%
st_transform(crs = st_crs(wecc_tracts))
get_plants_within <- function(x) {
dist_list <- st_is_within_distance(
plant_coords,
wecc_tracts[x,],
dist = 1000*30*0.621371
)
dist_vec <- unlist(lapply(dist_list, function (x) ifelse(is_empty(x), 0, 1)))
target_index <- which(dist_vec == 1)
target_plants <- plant_coords$plantID[target_index]
my_rows <- length(target_plants)
temp_df <- data.frame(
ID = rep(wecc_tracts$GEOID10[x], my_rows),
plantID = target_plants
)
return(temp_df)
}
tracts_to_plants <- split(wecc_tracts, wecc_tracts$GEOID10)
tracts_to_plants <- lapply(tracts_to_plants, get_plants_within)
as.list(1:nrow(wecc_tracts))
# tracts_to_plants <- split(wecc_tracts, wecc_tracts$GEOID10)
tracts_to_plants <- lapply(as.list(1:nrow(wecc_tracts)), get_plants_within)
tracts_to_plants <- bind_rows(tracts_to_plants)
View(tracts_to_plants)
View(tracts_to_plants)
View(tracts_to_plants)
library(openxlsx)
library(tidyverse)
my_cats <- c(
"GOLD, CURRENCY, DEPOSITS TO BE REALIZED AND OTHERS",
"GOVERNMENT SECURITIES",
"TEMPORARY ADVANCES TO THE ARGENTINE GOVERNMENT",
"TOTAL ASSETS",
"OBLIGATIONS WITH INTERNATIONAL AGENCIES",
"Rate of Exchange USD/$:"
)
m_dates <- function(my_year, my_month){
x <- seq.Date(
from = as.Date(
paste(my_year, str_pad(my_month, width=2, side="left", pad = "0"), "07", sep="-")
),
to = as.Date(
paste(my_year, str_pad(my_month, width=2, side="left", pad = "0"), "28", sep="-")
),
by = 7
)
return(x)
}
df_list <- list()
for (i in 2017:2023){
df <- read_excel(
"C:/Users/eaper/Fall 2022/Int Finance/Serieanuali.xls",
sheet = as.character(i),
skip = 7,
col_names = F
)
colnames(df) <- as.character(1:ncol(df))
df <- df %>% filter(`1` %in% my_cats) %>% distinct() %>% select(-c(`1`))
row.names(df) <- c(
"International Assests", "Government Securities",
"Temporary Advances to the Argentine Government", "Total Assets",
"Exchange Rate (Pesos/USD)", "Liabilities to International Agencies")
df <- as.data.frame(t(df))
df$date <- do.call("c", lapply(1:12, function (x) m_dates(i, x)))
df_list[[i - 2016]] <- df
}
library(openxlsx)
library(tidyverse)
my_cats <- c(
"GOLD, CURRENCY, DEPOSITS TO BE REALIZED AND OTHERS",
"GOVERNMENT SECURITIES",
"TEMPORARY ADVANCES TO THE ARGENTINE GOVERNMENT",
"TOTAL ASSETS",
"OBLIGATIONS WITH INTERNATIONAL AGENCIES",
"Rate of Exchange USD/$:"
)
m_dates <- function(my_year, my_month){
x <- seq.Date(
from = as.Date(
paste(my_year, str_pad(my_month, width=2, side="left", pad = "0"), "07", sep="-")
),
to = as.Date(
paste(my_year, str_pad(my_month, width=2, side="left", pad = "0"), "28", sep="-")
),
by = 7
)
return(x)
}
df_list <- list()
i = 2017
df <- read_excel(
"C:/Users/eaper/Fall 2022/Int Finance/Serieanuali.xls",
sheet = as.character(i),
skip = 7,
col_names = F
)
colnames(df) <- as.character(1:ncol(df))
View(df)
df <- df %>% filter(`1` %in% my_cats) %>% distinct() %>% select(-c(`1`))
row.names(df) <- c(
"International Assests", "Government Securities",
"Temporary Advances to the Argentine Government", "Total Assets",
"Exchange Rate (Pesos/USD)", "Liabilities to International Agencies")
df <- data.frame(df)
View(df)
row.names(df) <- c(
"International Assests", "Government Securities",
"Temporary Advances to the Argentine Government", "Total Assets",
"Exchange Rate (Pesos/USD)", "Liabilities to International Agencies")
View(df)
df <- as.data.frame(t(df))
View(df)
df$date <- do.call("c", lapply(1:12, function (x) m_dates(i, x)))
df_list[[i - 2016]] <- df
i = 2018
df <- read_excel(
"C:/Users/eaper/Fall 2022/Int Finance/Serieanuali.xls",
sheet = as.character(i),
skip = 7,
col_names = F
)
i = 2018
df <- read_excel(
"C:/Users/eaper/Fall 2022/Int Finance/Serieanuali.xls",
sheet = as.character(i),
skip = 7,
col_names = F
)
colnames(df) <- as.character(1:ncol(df))
df <- df %>% filter(`1` %in% my_cats) %>% distinct() %>% select(-c(`1`))
df <- data.frame(df)
row.names(df) <- c(
"International Assests", "Government Securities",
"Temporary Advances to the Argentine Government", "Total Assets",
"Exchange Rate (Pesos/USD)", "Liabilities to International Agencies")
View(df)
df <- as.data.frame(t(df))
df$date <- do.call("c", lapply(1:12, function (x) m_dates(i, x)))
df_list[[i - 2016]] <- df
View(df_list)
library(openxlsx)
library(tidyverse)
my_cats <- c(
"GOLD, CURRENCY, DEPOSITS TO BE REALIZED AND OTHERS",
"GOVERNMENT SECURITIES",
"TEMPORARY ADVANCES TO THE ARGENTINE GOVERNMENT",
"TOTAL ASSETS",
"OBLIGATIONS WITH INTERNATIONAL AGENCIES",
"Rate of Exchange USD/$:"
)
m_dates <- function(my_year, my_month){
x <- seq.Date(
from = as.Date(
paste(my_year, str_pad(my_month, width=2, side="left", pad = "0"), "07", sep="-")
),
to = as.Date(
paste(my_year, str_pad(my_month, width=2, side="left", pad = "0"), "28", sep="-")
),
by = 7
)
return(x)
}
df_list <- list()
for (i in 2017:2023){
df <- read_excel(
"C:/Users/eaper/Fall 2022/Int Finance/Serieanuali.xls",
sheet = as.character(i),
skip = 7,
col_names = F
)
colnames(df) <- as.character(1:ncol(df))
df <- df %>% filter(`1` %in% my_cats) %>% distinct() %>% select(-c(`1`))
df <- data.frame(df)
row.names(df) <- c(
"International Assests", "Government Securities",
"Temporary Advances to the Argentine Government", "Total Assets",
"Exchange Rate (Pesos/USD)", "Liabilities to International Agencies")
df <- as.data.frame(t(df))
df$date <- do.call("c", lapply(1:12, function (x) m_dates(i, x)))
df_list[[i - 2016]] <- df
}
library(openxlsx)
library(tidyverse)
my_cats <- c(
"GOLD, CURRENCY, DEPOSITS TO BE REALIZED AND OTHERS",
"GOVERNMENT SECURITIES",
"TEMPORARY ADVANCES TO THE ARGENTINE GOVERNMENT",
"TOTAL ASSETS",
"OBLIGATIONS WITH INTERNATIONAL AGENCIES",
"Rate of Exchange USD/$:"
)
m_dates <- function(my_year, my_month){
x <- seq.Date(
from = as.Date(
paste(my_year, str_pad(my_month, width=2, side="left", pad = "0"), "07", sep="-")
),
to = as.Date(
paste(my_year, str_pad(my_month, width=2, side="left", pad = "0"), "28", sep="-")
),
by = 7
)
return(x)
}
df_list <- list()
for (i in 2017:2023){
df <- read_excel(
"C:/Users/eaper/Fall 2022/Int Finance/Serieanuali.xls",
sheet = as.character(i),
skip = 7,
col_names = F
)
colnames(df) <- as.character(1:ncol(df))
df <- df %>% filter(`1` %in% my_cats) %>% distinct() %>% select(-c(`1`))
df <- data.frame(df)
row.names(df) <- c(
"International Assests", "Government Securities",
"Temporary Advances to the Argentine Government", "Total Assets",
"Exchange Rate (Pesos/USD)", "Liabilities to International Agencies")
df <- as.data.frame(t(df))[1:48,]
df$date <- do.call("c", lapply(1:12, function (x) m_dates(i, x)))
df_list[[i - 2016]] <- df
}
p <- bind_rows(df_list)
View(df_list)
View(df_list)
l <- df_list[[5]]
View(l)
l <- data.frame(
`International Assests` = as.numeric(l$`International Assests`),
`Government Securities` = as.numeric(l$`Government Securities`),
`Temporary Advances to the Argentine Government` = as.numeric(l$`Temporary Advances to the Argentine Government`),
`Total Assets` = as.numeric(l$`Total Assets`),
`Exchange Rate (Pesos/USD)` = as.numeric(l$`Exchange Rate (Pesos/USD)`),
`Liabilities to International Agencies` = as.numeric(l$`Liabilities to International Agencies`)
date = l$date
is.numeric(l$`Liabilities to International Agencies`)
all(is.numeric(l$`Liabilities to International Agencies`))
each(is.numeric(l$`Liabilities to International Agencies`))
for (i in 1:48){
print(i)
print(is.numeric(l$`Liabilities to International Agencies`))
}
for (i in 1:48){
print(i)
print(is.numeric(l$`Liabilities to International Agencies`[i]))
}
l <- data.frame(
`International Assests` = as.numeric(l$`International Assests`),
`Government Securities` = as.numeric(l$`Government Securities`),
`Temporary Advances to the Argentine Government` = as.numeric(l$`Temporary Advances to the Argentine Government`),
`Total Assets` = as.numeric(l$`Total Assets`),
`Exchange Rate (Pesos/USD)` = as.numeric(l$`Exchange Rate (Pesos/USD)`),
`Liabilities to International Agencies` = as.numeric(l$`Liabilities to International Agencies`),
date = l$date
)
View(l)
df_list[[5]] <- l
p <- bind_rows(df_list)
p <- p %>%
mutate(
share_int = `International Assests`/`Total Assets`,
share_gov = `Government Securities`/`Total Assets`,
share_temp_adv = `Temporary Advances to the Argentine Government`/`Total Assets`
)
write_csv(p, "C:/Users/eaper/Fall 2022/Int Finance/out.csv")
write_csv(p, "C:/Users/eaper/Fall 2022/Int Finance/out.csv")
